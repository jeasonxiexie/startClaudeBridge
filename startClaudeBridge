#!/bin/bash

# Claude Bridge Launcher
# Simplified command to start claude-bridge with configured API keys and models
#
# Usage:
#   startClaudeBridge           - Use default configuration (quick start)
#   startClaudeBridge -p        - Force interactive prompt mode
#   startClaudeBridge --prompt  - Force interactive prompt mode
#   startClaudeBridge -h        - Show help

CONFIG_DIR="$HOME/.claudebridge"
CONFIG_FILE="$CONFIG_DIR/config.json"
MODELS_FILE="$CONFIG_DIR/models.json"
SETTINGS_FILE="$CONFIG_DIR/settings.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check if config files exist
check_config() {
    if [[ ! -f "$CONFIG_FILE" ]] || [[ ! -f "$MODELS_FILE" ]] || [[ ! -f "$SETTINGS_FILE" ]]; then
        echo -e "${RED}错误: 配置文件不存在${NC}"
        echo "请确保以下文件存在:"
        echo "  $CONFIG_FILE"
        echo "  $MODELS_FILE"
        echo "  $SETTINGS_FILE"
        exit 1
    fi
}

# Parse JSON using Python (built-in on macOS)
parse_json() {
    python3 -c "
import json, sys
with open('$1', 'r') as f:
    data = json.load(f)
$2
"
}

# Get API keys for traditional mode
get_api_keys() {
    parse_json "$CONFIG_FILE" "
for i, key in enumerate(data['apiKeys']):
    print(f\"{i+1}. {key['name']} - {key.get('description', '')}\")"
}

# Get API keys for fzf mode
get_api_keys_fzf() {
    parse_json "$CONFIG_FILE" "
for i, key in enumerate(data['apiKeys']):
    print(f\"{key['name']} - {key.get('description', '')}\")"
}

# Get models for traditional mode
get_models() {
    parse_json "$MODELS_FILE" "
for i, model in enumerate(data['data']):
    print(f\"{i+1}. {model['id']}\")"
}

# Get models for fzf mode
get_models_fzf() {
    parse_json "$MODELS_FILE" "
for model in data['data']:
    print(model['id'])"
}

# Get API key by index
get_api_key_data() {
    local index=$1
    parse_json "$CONFIG_FILE" "
try:
    key_data = data['apiKeys'][$((index-1))]
    print(f\"{key_data['key']}|{key_data['baseURL']}\")
except IndexError:
    print('Invalid selection', file=sys.stderr)
    sys.exit(1)"
}

# Get model by index
get_model_id() {
    local index=$1
    parse_json "$MODELS_FILE" "
try:
    model = data['data'][$((index-1))]
    print(model['id'])
except IndexError:
    print('Invalid selection', file=sys.stderr)
    sys.exit(1)"
}

# Get default settings
get_defaults() {
    local setting=$1
    parse_json "$SETTINGS_FILE" "
print(data.get('$setting', ''))"
}

# Get API key data by name
get_api_key_data_by_name() {
    local name="$1"
    python3 -c "
import json, sys
with open('$CONFIG_FILE', 'r') as f:
    data = json.load(f)
name = sys.argv[1]
for key in data['apiKeys']:
    if key['name'] == name:
        print(f\"{key['key']}|{key['baseURL']}\")
        break
" "$name"
}

# Get model ID by name
get_model_id_by_name() {
    local model_id="$1"
    echo "$model_id"
}

# Interactive selection with fzf (if available)
select_api_key() {
    if command -v fzf &> /dev/null && [[ -t 0 ]]; then
        echo -e "${BLUE}使用 fzf 选择 API Key (支持模糊搜索):${NC}" >&2
        local selection=$(get_api_keys_fzf | fzf --height=10 --layout=reverse --border --prompt="API Key > " 2>/dev/null)
        if [[ -n "$selection" ]]; then
            # Extract the name (before the first " - ")
            echo "${selection%% - *}"
        else
            echo "" # Return empty if user cancelled
        fi
    else
        echo -e "${YELLOW}选择 API Key:${NC}" >&2
        get_api_keys >&2
        echo >&2
        read -p "请输入选择 (1-$(parse_json "$CONFIG_FILE" "print(len(data['apiKeys']))")): " api_choice
        
        if ! [[ "$api_choice" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}无效输入${NC}" >&2
            return 1
        fi
        
        local api_data=$(get_api_key_data "$api_choice")
        if [[ $? -ne 0 ]]; then
            echo -e "${RED}无效的 API Key 选择${NC}" >&2
            return 1
        fi
        
        # Get the name by index
        parse_json "$CONFIG_FILE" "print(data['apiKeys'][$((api_choice-1))]['name'])"
    fi
}

# Interactive model selection with fzf (if available)
select_model() {
    if command -v fzf &> /dev/null && [[ -t 0 ]]; then
        echo -e "${BLUE}使用 fzf 选择模型 (支持模糊搜索):${NC}" >&2
        local selection=$(get_models_fzf | fzf --height=15 --layout=reverse --border --prompt="Model > " 2>/dev/null)
        if [[ -n "$selection" ]]; then
            echo "$selection"
        else
            echo "" # Return empty if user cancelled
        fi
    else
        echo -e "${YELLOW}选择模型:${NC}" >&2
        get_models >&2
        echo >&2
        read -p "请输入选择 (1-$(parse_json "$MODELS_FILE" "print(len(data['data']))")): " model_choice
        
        if ! [[ "$model_choice" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}无效输入${NC}" >&2
            return 1
        fi
        
        local model_id=$(get_model_id "$model_choice")
        if [[ $? -ne 0 ]]; then
            echo -e "${RED}无效的模型选择${NC}" >&2
            return 1
        fi
        
        echo "$model_id"
    fi
}

# Show help
show_help() {
    echo -e "${CYAN}Claude Bridge Launcher${NC}"
    echo
    echo "简化的 Claude Bridge 启动器，支持配置文件管理 API Keys 和模型"
    echo
    echo -e "${YELLOW}用法:${NC}"
    echo "  startClaudeBridge           使用默认配置快速启动"
    echo "  startClaudeBridge -p        强制进入交互选择模式"
    echo "  startClaudeBridge --prompt  强制进入交互选择模式"
    echo "  startClaudeBridge -h        显示此帮助信息"
    echo "  startClaudeBridge --help    显示此帮助信息"
    echo
    echo -e "${YELLOW}配置文件位置:${NC}"
    echo "  ~/.claudebridge/config.json   - API Keys 配置"
    echo "  ~/.claudebridge/models.json   - 模型列表"
    echo "  ~/.claudebridge/settings.json - 默认设置"
    echo
    echo -e "${YELLOW}增强功能:${NC}"
    echo "  如果安装了 fzf，将自动启用模糊搜索和光标选择功能"
    echo "  安装 fzf: brew install fzf (macOS)"
    echo
}

# Main function
main() {
    check_config
    
    echo -e "${CYAN}=== Claude Bridge Launcher ===${NC}"
    echo
    
    # Check command line arguments
    FORCE_PROMPT=false
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_help
        exit 0
    elif [[ "$1" == "-p" ]] || [[ "$1" == "--prompt" ]]; then
        FORCE_PROMPT=true
    fi
    
    # Check if quick start is enabled
    QUICK_START=$(get_defaults "quickStart")
    DEFAULT_API_KEY=$(get_defaults "defaultApiKey")
    DEFAULT_MODEL=$(get_defaults "defaultModel")
    
    if [[ "$QUICK_START" == "true" ]] && [[ -n "$DEFAULT_API_KEY" ]] && [[ -n "$DEFAULT_MODEL" ]] && [[ "$FORCE_PROMPT" == "false" ]]; then
        echo -e "${GREEN}使用默认配置启动...${NC}"
        echo "API Key: $DEFAULT_API_KEY"
        echo "Model: $DEFAULT_MODEL"
        echo
        
        # Find API key data by name
        API_KEY_DATA=$(get_api_key_data_by_name "$DEFAULT_API_KEY")
        
        if [[ -n "$API_KEY_DATA" ]]; then
            IFS='|' read -r API_KEY BASE_URL <<< "$API_KEY_DATA"
            
            echo -e "${YELLOW}执行命令:${NC}"
            echo "claude-bridge openai $DEFAULT_MODEL --baseURL $BASE_URL --apiKey $API_KEY"
            echo
            
            # Execute the command
            claude-bridge openai "$DEFAULT_MODEL" --baseURL "$BASE_URL" --apiKey "$API_KEY"
            exit 0
        fi
    fi
    
    # If quick start failed or force prompt enabled, fall back to interactive mode
    if [[ "$FORCE_PROMPT" == "true" ]]; then
        echo -e "${BLUE}使用交互模式选择配置...${NC}"
        echo
    fi
    
    # Check if fzf is available
    if command -v fzf &> /dev/null; then
        echo -e "${GREEN}检测到 fzf，启用模糊搜索模式${NC}"
        echo
    fi
    
    # Select API Key
    SELECTED_API_KEY=$(select_api_key)
    echo "DEBUG: Selected API Key: '$SELECTED_API_KEY'"
    if [[ -z "$SELECTED_API_KEY" ]]; then
        echo -e "${RED}未选择 API Key${NC}"
        exit 1
    fi
    
    API_KEY_DATA=$(get_api_key_data_by_name "$SELECTED_API_KEY")
    echo "DEBUG: API Key Data: '$API_KEY_DATA'"
    if [[ -z "$API_KEY_DATA" ]]; then
        echo -e "${RED}无效的 API Key 选择${NC}"
        exit 1
    fi
    
    IFS='|' read -r API_KEY BASE_URL <<< "$API_KEY_DATA"
    
    echo
    # Select Model
    MODEL_ID=$(select_model)
    if [[ -z "$MODEL_ID" ]]; then
        echo -e "${RED}未选择模型${NC}"
        exit 1
    fi
    
    echo
    echo -e "${YELLOW}执行命令:${NC}"
    echo "claude-bridge openai $MODEL_ID --baseURL $BASE_URL --apiKey $API_KEY"
    echo
    
    # Execute the command
    claude-bridge openai "$MODEL_ID" --baseURL "$BASE_URL" --apiKey "$API_KEY"
}

# Check if claude-bridge command exists
if ! command -v claude-bridge &> /dev/null; then
    echo -e "${RED}错误: claude-bridge 命令未找到${NC}"
    echo "请确保已安装 claude-bridge"
    exit 1
fi

main "$@"